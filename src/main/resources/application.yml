spring:
  profiles:
    active: dev-mongo-java-server

  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER

  application:
    name: BooksApiService
  data:
    mongodb:
      uri: mongodb://localhost:27017/books?safe=true&journal=true&w=majority&connectTimeoutMS=1001&wtimeoutMS=1000&serverSelectionTimeoutMS=10000
  aop:
    proxy-target-class: false
  devtools:
    livereload:
      enabled: false  # off as we already have live reload in the web tier project
  jackson:
    serialization:
      write-dates-as-timestamps: true

  security:           # You need to set up your own accounts / client secrets etc in Google and Facebook and replace NotInSCMx values
    oauth2:
      client:
        registration:
          google:
            client-id: NotInSCM1
            client-secret: NotInSCM1
            redirect-uri: https://{baseHost}{basePort}{basePath}/login/oauth2/code/google
          facebook:
            client-id: NotInSCM2
            client-secret: NotInSCM2
            redirect-uri: https://{baseHost}{basePort}{basePath}/login/oauth2/code/facebook
        provider:
          # Google provides all the info this app needs by default. Facebook needs configuring.
          facebook:
            user-info-uri: https://graph.facebook.com/me?fields=name,first_name,last_name,link,picture,email

  mail:
    host: localhost
    properties:
      mail:
        smtp:
          connectiontimeout: 5000
          timeout: 3000
          writetimeout: 5000
    test-connection: false

  # Default is no registration with Eureka a service registration server
  cloud:
    service-registry:
      auto-registration:
        enabled: false
        register-management: off
    loadbalancer:
      ribbon:
        enabled: false    # RibbonLoadBalancerClient deprecated. This setting uses BlockingLoadBalancerClient

# If running in containers we want to set a random port (i.e. override to set to 0)
server:
  port: 8080
  servlet:
    session:
      tracking-modes: cookie

# By default we disable Eureka client functionality even though it is on the classpath
eureka:
  client:
    enabled: false

# By default actuator is disabled.
# If you want to enable for your application, see the application-dev-mongo-java-server.yml for an example where these values are overriden
management:
  endpoints:
    enabled-by-default: false

# New in SB 2.5.0 and doesnt work with in memory mongo java server in tests
  metrics:
    mongo:
      command:
        enabled: false
      connectionpool:
        enabled: false

info:
  build:
    artifact: "@project.artifactId@"
    name: "@project.name@"
    description: "@project.description@"
    version: "@project.version@"

books:
  autoAuthUser: false       # Must be false in production!

  client:
    enableCORS: false       # Setting this to true in production is not supported - leaves app at risk of CSRF
    allowedCorsOrigin: http://localhost:9000
    postLogonUrl: http://localhost:9000/
    xsrfHeader: X-XSRF

  google:
    books:
      api:
        searchUrl: https://www.googleapis.com/books/v1/volumes?q=
        getByIdUrl: https://www.googleapis.com/books/v1/volumes/
        countryCode: country=GB
        maxResults: maxResults=30
        connecTimeout: 2000
        readTimeout: 3000

  reload:
    development:
      data: false  # Whether the contents of the /src/main/resources/sample_data will be reloaded into the database at application startup. Deletes all existing data!!!

  users:
    default:
      admin:
        email:   # The remote email address for a user that will be automatically made an admin on first logon.
      page:
        size: 5
    max:
      page:
        size: 100
    registrationAdminEmail:
      enabled: false
      emailTitle: "Books Service - New User Registration"
      emailContent: "New users(s) have registered for the Books service"
      emailFrom:
      emailTo:
      cron: "15 */15 * * * *"   # Cron expression for how often to look for new users and email an admin

    allow:
      actuator:
        user:
          creation: false           # Whether you allow admins to request the creation of users access Actuator endpoints

  jwt:
    expiryInMilliSeconds: 86400000  # One day
    actuatorExpiryInMilliSeconds: 31536000000  # One year
    cookieExpirySeconds: 86400      # One day / not set by cookie so "cookieExpirySeconds" not relevant
    secretKey:                      # Can be set using com.aidanwhiteley.books.controller.jwt.JwtUtils::createRandomBase64EncodedSecretKey
    issuer: "CloudyBookClub"
    cookieOverHttpsOnly: true
    cookieAccessedByHttpOnly: true
    cookiePath: /
    cookieSameSiteStrict: true      # Will set SameSite=Strict. Set to false for SameSite=Lax.

  oauth2:
    cookieOverHttpsOnly: true

  thread:
    pool1:
      coresize: 2
      maxsize: 4
      queue:
        capacity: 50
      thread:
        prefix: GoogleBooksLookup-
        
  feeds:
    maxentries: 30
    title: The Cloudy Bookclub recent entries
    domain: http://localhost:9000/
    description: Updates from the Cloudy Bookclub application

springdoc:
  pathsToMatch: /api/**, /feeds/**
  version: "@project.version@"